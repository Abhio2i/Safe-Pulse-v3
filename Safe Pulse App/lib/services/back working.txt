import 'dart:async';
import 'dart:convert';
import 'dart:developer';
import 'dart:ui';

import 'package:flutter/material.dart';
import 'package:flutter_background_service/flutter_background_service.dart';
import 'package:geolocator/geolocator.dart';
import 'package:permission_handler/permission_handler.dart';

import 'package:shared_preferences/shared_preferences.dart';
import 'package:stomp_dart_client/stomp_dart_client.dart';

Future<void> initializeService() async {
  final service = FlutterBackgroundService();
  await service.configure(
      iosConfiguration: IosConfiguration(
        autoStart: true,
        onForeground: onStart,
        onBackground: onIosBackground,
      ),
      androidConfiguration: AndroidConfiguration(
        onStart: onStart,
        autoStart: true,
        isForegroundMode: true,
      ));
  service.startService();
}

@pragma('vm:entry-point')
Future<bool> onIosBackground(ServiceInstance service) async {
  log('Service is running in the background');
  WidgetsFlutterBinding.ensureInitialized();
  DartPluginRegistrant.ensureInitialized();
  return true;
}

@pragma('vm:entry-point')
void onStart(ServiceInstance service) async {
  log('Service started');
  DartPluginRegistrant.ensureInitialized();

  // Initialize WebSocket client
  StompClient? stompClient;
  String? userEmail;
  String? userId;

  // Get user data from SharedPreferences
  try {
    final prefs = await SharedPreferences.getInstance();
    userEmail = prefs.getString("username");
    userId = prefs.getString("userId");
  } catch (e) {
    log("Error getting user data: $e");
  }

  // Setup WebSocket connection
  void connectWebSocket() {
    stompClient = StompClient(
      config: StompConfig.sockJS(
        url: '${ApiService.baseUrl}/ws-location',
        onConnect: (StompFrame frame) {
          log("WebSocket connected");
        },
        onDisconnect: (frame) => log("WebSocket disconnected"),
        onWebSocketError: (dynamic error) => log("WebSocket error: $error"),
        reconnectDelay: const Duration(seconds: 5),
      ),
    );
    stompClient?.activate();
  }

  // Connect to WebSocket
  connectWebSocket();

  if (service is AndroidServiceInstance) {
    service.setAsForegroundService();
    service.on('setAsForeground').listen((event) {
      service.setAsForegroundService();
    });
    service.on('setAsBackground').listen((event) {
      service.setAsBackgroundService();
    });
  }

  service.on('stopService').listen((event) {
    stompClient?.deactivate();
    service.stopSelf();
  });

  Timer.periodic(const Duration(seconds: 1), (timer) async {
    if (await Permission.locationAlways.isDenied) {
      if (service is AndroidServiceInstance) {
        if (await service.isForegroundService()) {
          await service.setForegroundNotificationInfo(
            title: "Permission Denied",
            content: "Waiting for location permission",
          );
        }
      }
      log("Waiting for location permission");
      service.invoke('update');
    } else {
      try {
        Position position = await Geolocator.getCurrentPosition(
            desiredAccuracy: LocationAccuracy.high);

        if (service is AndroidServiceInstance) {
          if (await service.isForegroundService()) {
            await service.setForegroundNotificationInfo(
              title: "Your location",
              content: "${position.latitude},${position.longitude}",
            );
          }
        }

        log("Background service running: ${position.latitude},${position.longitude}");
        service.invoke('update');

        // Send location data via WebSocket if connected
        if (stompClient?.connected == true &&
            userId != null &&
            userEmail != null) {
          final location = {
            'latitude': position.latitude,
            'longitude': position.longitude,
            'timestamp': DateTime.now().toIso8601String(),
            'userId': userId,
          };

          stompClient?.send(
            destination: '/app/update-location',
            body: jsonEncode(location),
          );

          log("Location data sent via WebSocket  $userId,${position.latitude}");
        } else {
          log("WebSocket not connected or user data missing");
          // Try to reconnect if not connected
          if (stompClient?.connected == false) {
            connectWebSocket();
          }
        }
      } catch (e) {
        log("Error in background service: $e");
      }
    }
  });
}
